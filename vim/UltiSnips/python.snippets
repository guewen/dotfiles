snippet pdb
import pdb; pdb.set_trace()
endsnippet
snippet vpdb
import vimpdb; vimpdb.set_trace()
endsnippet
snippet pudb
import pudb; pudb.set_trace()
endsnippet
snippet utf8 "-*- coding: utf-8 -*-" b
# -*- coding: utf-8 -*-
endsnippet
snippet agpl "AGPL3 header" b
# -*- coding: utf-8 -*-
# Â© `!v strftime("%Y")` `!v g:snips_full_company`
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl.html)
endsnippet
snippet __openerp__ "Manifest" b
{'name': '${1:name}',
 'version': '${2:version}',
 'author': '`!v g:snips_company`,Odoo Community Association (OCA)',
 'license': 'AGPL-3',
 'category': '${3:category}',
 'depends': [${5:depends},
             ],
 'website': 'http://`!v g:snips_company_website`',
 'data': [],
 'installable': True,
 }
endsnippet
snippet pool
self.pool['${1}']${2}
endsnippet
snippet orm "orm, fields" b
from openerp.osv import orm, fields
endsnippet
snippet orm "orm" b
from openerp.osv import orm
endsnippet
snippet models "models" b
from openerp import models
endsnippet
snippet models "models, fields" b
from openerp import models, fields
endsnippet
snippet models "models, fields, api" b
from openerp import models, fields, api
endsnippet
snippet models "models, fields, api, exceptions, _" b
from openerp import models, fields, api, exceptions, _
endsnippet
snippet Model "Model" b
class ${1:name}(orm.Model):
    ${2:_inherit} = '${3:model}'

    ${4}
endsnippet
snippet Model "TransientModel" b
class ${1:name}(orm.TransientModel):
    ${2:_inherit} = '${3:model}'

    ${4}
endsnippet
snippet Model "AbstractModel" b
class ${1:name}(orm.AbstractModel):
    ${2:_inherit} = '${3:model}'

    ${4}
endsnippet
snippet Boolean "" b
${1:name} = fields.Boolean(
    string='{2}',
    ${3}
    help=${3:help},
)
endsnippet
snippet Char "" b
${1:name} = fields.Char(
    string='${2}',
    ${3}
)
endsnippet
snippet Date "" b
${1:name} = fields.Date(
    string='${2}',
    ${3}
)
endsnippet
snippet Datetime "" b
${1:name} = fields.Datetime(
    string='${2}',
    ${3}
)
endsnippet
snippet Many2one "" b
${1:name} = fields.Many2one(
    comodel_name=${2:model_name},
    string='${2}',
    ${3}
)
endsnippet
snippet One2many "" b
${1:name} = fields.One2many(
    comodel_name=${2:model_name},
    string='${3}',
    ${4}
)
endsnippet
snippet Many2many "" b
${1:name} = fields.Many2many(
    comodel_name=${2:model_name},
    string='${3}',
    ${4}
)
endsnippet
